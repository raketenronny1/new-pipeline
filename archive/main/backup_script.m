%% BACKUP SCRIPT - MANDATORY FIRST STEP
% Creates timestamped backup of all MATLAB files before refactoring
% Author: Generated by AI Agent
% Date: 2025-10-28

function backup_dir = backup_script()
    % Create timestamped backup directory
    backup_dir = sprintf('backup_%s', datestr(now, 'yyyymmdd_HHMMSS'));
    
    fprintf('Creating backup directory: %s\n', backup_dir);
    mkdir(backup_dir);
    
    % Backup directories to include
    backup_targets = {
        'src/meningioma_ftir_pipeline/*.m'
        'archive/main/*.m'
        'archive/test/*.m'
        '*.m'
    };
    
    total_files = 0;
    
    % Copy all MATLAB files from target directories
    for i = 1:length(backup_targets)
        target = backup_targets{i};
        files = dir(target);
        
        if ~isempty(files)
            % Get the directory part
            [dir_part, ~, ~] = fileparts(target);
            
            % Create corresponding subdirectory in backup
            if ~isempty(dir_part)
                backup_subdir = fullfile(backup_dir, dir_part);
                if ~exist(backup_subdir, 'dir')
                    mkdir(backup_subdir);
                end
            else
                backup_subdir = backup_dir;
            end
            
            % Copy files
            for j = 1:length(files)
                if ~files(j).isdir
                    source = fullfile(files(j).folder, files(j).name);
                    dest = fullfile(backup_subdir, files(j).name);
                    copyfile(source, dest);
                    total_files = total_files + 1;
                end
            end
        end
    end
    
    % Backup configuration files
    config_files = {'config.json', 'config.mat', 'config.m'};
    for i = 1:length(config_files)
        if exist(config_files{i}, 'file')
            copyfile(config_files{i}, backup_dir);
            total_files = total_files + 1;
        end
    end
    
    % Backup data directory structure info
    save(fullfile(backup_dir, 'backup_metadata.mat'), 'backup_targets', 'total_files');
    
    % Log backup completion
    fprintf('✓ Backup created: %s\n', backup_dir);
    fprintf('  Files backed up: %d\n', total_files);
    
    % Verify backup
    verify_backup(backup_dir, total_files);
end

function verify_backup(backup_dir, expected_files)
    % Verify backup exists and is complete
    assert(exist(backup_dir, 'dir') == 7, 'Backup directory not created');
    
    % Count files in backup
    backup_files = dir(fullfile(backup_dir, '**', '*.m'));
    backup_count = length(backup_files);
    
    fprintf('✓ Backup verified: %d files preserved\n', backup_count);
    
    if backup_count < expected_files
        warning('Backup may be incomplete: %d vs %d files', backup_count, expected_files);
    end
    
    % Create backup manifest
    manifest_file = fullfile(backup_dir, 'BACKUP_MANIFEST.txt');
    fid = fopen(manifest_file, 'w');
    fprintf(fid, 'Backup created: %s\n', datestr(now));
    fprintf(fid, 'Total files: %d\n\n', backup_count);
    fprintf(fid, 'File list:\n');
    for i = 1:length(backup_files)
        fprintf(fid, '  %s\n', fullfile(backup_files(i).folder, backup_files(i).name));
    end
    fclose(fid);
    
    fprintf('✓ Backup manifest created: %s\n', manifest_file);
end
