% Debug function to fix issues with y_train and y_test types
% Create this file in the test directory to apply the fix

function fix_categorical_issues()
    % Copy the load_and_prepare_data function and modify it to handle categorical variables
    orig_file = fullfile(fileparts(fileparts(mfilename('fullpath'))), 'load_and_prepare_data.m');
    fixed_file = fullfile(fileparts(mfilename('fullpath')), 'load_and_prepare_data_fixed.m');
    
    % Read original file
    fid = fopen(orig_file, 'r');
    if fid == -1
        error('Could not open original file: %s', orig_file);
    end
    content = fread(fid, '*char')';
    fclose(fid);
    
    % Fix the class distribution code
    content = strrep(content, ...
        'fprintf(''Training WHO-1: %d, WHO-3: %d\n'', sum(y_train==1), sum(y_train==3));', ...
        ['% Handle categorical variables\n', ...
        'if iscategorical(y_train)\n', ...
        '    train_who1 = sum(double(y_train)==1);\n', ...
        '    train_who3 = sum(double(y_train)==3);\n', ...
        'else\n', ...
        '    train_who1 = sum(y_train==1);\n', ...
        '    train_who3 = sum(y_train==3);\n', ...
        'end\n', ...
        'fprintf(''Training WHO-1: %d, WHO-3: %d\n'', train_who1, train_who3);']);
    
    content = strrep(content, ...
        'fprintf(''Test WHO-1: %d, WHO-3: %d\n'', sum(y_test==1), sum(y_test==3));', ...
        ['% Handle categorical variables\n', ...
        'if iscategorical(y_test)\n', ...
        '    test_who1 = sum(double(y_test)==1);\n', ...
        '    test_who3 = sum(double(y_test)==3);\n', ...
        'else\n', ...
        '    test_who1 = sum(y_test==1);\n', ...
        '    test_who3 = sum(y_test==3);\n', ...
        'end\n', ...
        'fprintf(''Test WHO-1: %d, WHO-3: %d\n'', test_who1, test_who3);']);
    
    % Fix the trainingData and testData creation
    content = strrep(content, ...
        'trainingData.y = y_train;', ...
        ['% Ensure y_train is numeric for model training\n', ...
        'if iscategorical(y_train)\n', ...
        '    trainingData.y = double(y_train);\n', ...
        'else\n', ...
        '    trainingData.y = y_train;\n', ...
        'end']);
    
    content = strrep(content, ...
        'testData.y = y_test;', ...
        ['% Ensure y_test is numeric for model evaluation\n', ...
        'if iscategorical(y_test)\n', ...
        '    testData.y = double(y_test);\n', ...
        'else\n', ...
        '    testData.y = y_test;\n', ...
        'end']);
    
    % Write fixed file
    fid = fopen(fixed_file, 'w');
    if fid == -1
        error('Could not create fixed file: %s', fixed_file);
    end
    fprintf(fid, '%s', content);
    fclose(fid);
    
    fprintf('Created fixed load_and_prepare_data function at: %s\n', fixed_file);
    
    % Create a patch function to override the original
    patch_file = fullfile(fileparts(mfilename('fullpath')), 'load_and_prepare_data.m');
    fid = fopen(patch_file, 'w');
    if fid == -1
        error('Could not create patch file: %s', patch_file);
    end
    
    fprintf(fid, '%s\n', ...
        'function load_and_prepare_data(cfg)', ...
        '    % Patch function to call the fixed implementation', ...
        '    % This overrides the original load_and_prepare_data in the test environment', ...
        '    load_and_prepare_data_fixed(cfg);', ...
        'end');
    fclose(fid);
    
    fprintf('Created patch function at: %s\n', patch_file);
end